/* soapStub.h
   Generated by gSOAP 2.8.4 from OLSWS.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://www.ebi.ac.uk/ontology-lookup/OntologyQuery"
#define SOAP_NAMESPACE_OF_ns2	"http://xml.apache.org/xml-soap"
#define SOAP_NAMESPACE_OF_ns3	"http://model.web.ook.ebi.ac.uk"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (10)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (12)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (14)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (15)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getVersion
#define SOAP_TYPE__ns1__getVersion (17)
/* ns1:getVersion */
class SOAP_CMAC _ns1__getVersion
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__getVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getVersion() { _ns1__getVersion::soap_default(NULL); }
	virtual ~_ns1__getVersion() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getVersionResponse
#define SOAP_TYPE__ns1__getVersionResponse (18)
/* ns1:getVersionResponse */
class SOAP_CMAC _ns1__getVersionResponse
{
public:
	std::string getVersionReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__getVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getVersionResponse() { _ns1__getVersionResponse::soap_default(NULL); }
	virtual ~_ns1__getVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermById
#define SOAP_TYPE__ns1__getTermById (19)
/* ns1:getTermById */
class SOAP_CMAC _ns1__getTermById
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns1__getTermById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermById() { _ns1__getTermById::soap_default(NULL); }
	virtual ~_ns1__getTermById() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermByIdResponse
#define SOAP_TYPE__ns1__getTermByIdResponse (20)
/* ns1:getTermByIdResponse */
class SOAP_CMAC _ns1__getTermByIdResponse
{
public:
	std::string getTermByIdReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns1__getTermByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermByIdResponse() { _ns1__getTermByIdResponse::soap_default(NULL); }
	virtual ~_ns1__getTermByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermMetadata
#define SOAP_TYPE__ns1__getTermMetadata (21)
/* ns1:getTermMetadata */
class SOAP_CMAC _ns1__getTermMetadata
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns1__getTermMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermMetadata() { _ns1__getTermMetadata::soap_default(NULL); }
	virtual ~_ns1__getTermMetadata() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermMetadataResponse
#define SOAP_TYPE__ns1__getTermMetadataResponse (22)
/* ns1:getTermMetadataResponse */
class SOAP_CMAC _ns1__getTermMetadataResponse
{
public:
	class ns2__Map *getTermMetadataReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns1__getTermMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermMetadataResponse() { _ns1__getTermMetadataResponse::soap_default(NULL); }
	virtual ~_ns1__getTermMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermXrefs
#define SOAP_TYPE__ns1__getTermXrefs (23)
/* ns1:getTermXrefs */
class SOAP_CMAC _ns1__getTermXrefs
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns1__getTermXrefs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermXrefs() { _ns1__getTermXrefs::soap_default(NULL); }
	virtual ~_ns1__getTermXrefs() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermXrefsResponse
#define SOAP_TYPE__ns1__getTermXrefsResponse (24)
/* ns1:getTermXrefsResponse */
class SOAP_CMAC _ns1__getTermXrefsResponse
{
public:
	ns2__Map *getTermXrefsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns1__getTermXrefsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermXrefsResponse() { _ns1__getTermXrefsResponse::soap_default(NULL); }
	virtual ~_ns1__getTermXrefsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getOntologyNames
#define SOAP_TYPE__ns1__getOntologyNames (25)
/* ns1:getOntologyNames */
class SOAP_CMAC _ns1__getOntologyNames
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__getOntologyNames */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getOntologyNames() { _ns1__getOntologyNames::soap_default(NULL); }
	virtual ~_ns1__getOntologyNames() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getOntologyNamesResponse
#define SOAP_TYPE__ns1__getOntologyNamesResponse (26)
/* ns1:getOntologyNamesResponse */
class SOAP_CMAC _ns1__getOntologyNamesResponse
{
public:
	ns2__Map *getOntologyNamesReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__getOntologyNamesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getOntologyNamesResponse() { _ns1__getOntologyNamesResponse::soap_default(NULL); }
	virtual ~_ns1__getOntologyNamesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getOntologyLoadDate
#define SOAP_TYPE__ns1__getOntologyLoadDate (27)
/* ns1:getOntologyLoadDate */
class SOAP_CMAC _ns1__getOntologyLoadDate
{
public:
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__getOntologyLoadDate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getOntologyLoadDate() { _ns1__getOntologyLoadDate::soap_default(NULL); }
	virtual ~_ns1__getOntologyLoadDate() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getOntologyLoadDateResponse
#define SOAP_TYPE__ns1__getOntologyLoadDateResponse (28)
/* ns1:getOntologyLoadDateResponse */
class SOAP_CMAC _ns1__getOntologyLoadDateResponse
{
public:
	std::string getOntologyLoadDateReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1__getOntologyLoadDateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getOntologyLoadDateResponse() { _ns1__getOntologyLoadDateResponse::soap_default(NULL); }
	virtual ~_ns1__getOntologyLoadDateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getAllTermsFromOntology
#define SOAP_TYPE__ns1__getAllTermsFromOntology (29)
/* ns1:getAllTermsFromOntology */
class SOAP_CMAC _ns1__getAllTermsFromOntology
{
public:
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1__getAllTermsFromOntology */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getAllTermsFromOntology() { _ns1__getAllTermsFromOntology::soap_default(NULL); }
	virtual ~_ns1__getAllTermsFromOntology() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getAllTermsFromOntologyResponse
#define SOAP_TYPE__ns1__getAllTermsFromOntologyResponse (30)
/* ns1:getAllTermsFromOntologyResponse */
class SOAP_CMAC _ns1__getAllTermsFromOntologyResponse
{
public:
	ns2__Map *getAllTermsFromOntologyReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__ns1__getAllTermsFromOntologyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getAllTermsFromOntologyResponse() { _ns1__getAllTermsFromOntologyResponse::soap_default(NULL); }
	virtual ~_ns1__getAllTermsFromOntologyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getRootTerms
#define SOAP_TYPE__ns1__getRootTerms (31)
/* ns1:getRootTerms */
class SOAP_CMAC _ns1__getRootTerms
{
public:
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__ns1__getRootTerms */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getRootTerms() { _ns1__getRootTerms::soap_default(NULL); }
	virtual ~_ns1__getRootTerms() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getRootTermsResponse
#define SOAP_TYPE__ns1__getRootTermsResponse (32)
/* ns1:getRootTermsResponse */
class SOAP_CMAC _ns1__getRootTermsResponse
{
public:
	ns2__Map *getRootTermsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__ns1__getRootTermsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getRootTermsResponse() { _ns1__getRootTermsResponse::soap_default(NULL); }
	virtual ~_ns1__getRootTermsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermsByName
#define SOAP_TYPE__ns1__getTermsByName (33)
/* ns1:getTermsByName */
class SOAP_CMAC _ns1__getTermsByName
{
public:
	std::string partialName;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	bool reverseKeyOrder;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__ns1__getTermsByName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermsByName() { _ns1__getTermsByName::soap_default(NULL); }
	virtual ~_ns1__getTermsByName() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermsByNameResponse
#define SOAP_TYPE__ns1__getTermsByNameResponse (34)
/* ns1:getTermsByNameResponse */
class SOAP_CMAC _ns1__getTermsByNameResponse
{
public:
	ns2__Map *getTermsByNameReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__ns1__getTermsByNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermsByNameResponse() { _ns1__getTermsByNameResponse::soap_default(NULL); }
	virtual ~_ns1__getTermsByNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermsByExactName
#define SOAP_TYPE__ns1__getTermsByExactName (35)
/* ns1:getTermsByExactName */
class SOAP_CMAC _ns1__getTermsByExactName
{
public:
	std::string exactName;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns1__getTermsByExactName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermsByExactName() { _ns1__getTermsByExactName::soap_default(NULL); }
	virtual ~_ns1__getTermsByExactName() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermsByExactNameResponse
#define SOAP_TYPE__ns1__getTermsByExactNameResponse (36)
/* ns1:getTermsByExactNameResponse */
class SOAP_CMAC _ns1__getTermsByExactNameResponse
{
public:
	ns2__Map *getTermsByExactNameReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns1__getTermsByExactNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermsByExactNameResponse() { _ns1__getTermsByExactNameResponse::soap_default(NULL); }
	virtual ~_ns1__getTermsByExactNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getPrefixedTermsByName
#define SOAP_TYPE__ns1__getPrefixedTermsByName (37)
/* ns1:getPrefixedTermsByName */
class SOAP_CMAC _ns1__getPrefixedTermsByName
{
public:
	std::string partialName;	/* required element of type xsd:string */
	bool reverseKeyOrder;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns1__getPrefixedTermsByName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getPrefixedTermsByName() { _ns1__getPrefixedTermsByName::soap_default(NULL); }
	virtual ~_ns1__getPrefixedTermsByName() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getPrefixedTermsByNameResponse
#define SOAP_TYPE__ns1__getPrefixedTermsByNameResponse (38)
/* ns1:getPrefixedTermsByNameResponse */
class SOAP_CMAC _ns1__getPrefixedTermsByNameResponse
{
public:
	ns2__Map *getPrefixedTermsByNameReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__ns1__getPrefixedTermsByNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getPrefixedTermsByNameResponse() { _ns1__getPrefixedTermsByNameResponse::soap_default(NULL); }
	virtual ~_ns1__getPrefixedTermsByNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermParents
#define SOAP_TYPE__ns1__getTermParents (39)
/* ns1:getTermParents */
class SOAP_CMAC _ns1__getTermParents
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__ns1__getTermParents */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermParents() { _ns1__getTermParents::soap_default(NULL); }
	virtual ~_ns1__getTermParents() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermParentsResponse
#define SOAP_TYPE__ns1__getTermParentsResponse (40)
/* ns1:getTermParentsResponse */
class SOAP_CMAC _ns1__getTermParentsResponse
{
public:
	ns2__Map *getTermParentsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__ns1__getTermParentsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermParentsResponse() { _ns1__getTermParentsResponse::soap_default(NULL); }
	virtual ~_ns1__getTermParentsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermChildren
#define SOAP_TYPE__ns1__getTermChildren (41)
/* ns1:getTermChildren */
class SOAP_CMAC _ns1__getTermChildren
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	int distance;	/* required element of type xsd:int */
	std::vector<int >relationTypes;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__ns1__getTermChildren */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermChildren() { _ns1__getTermChildren::soap_default(NULL); }
	virtual ~_ns1__getTermChildren() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermChildrenResponse
#define SOAP_TYPE__ns1__getTermChildrenResponse (42)
/* ns1:getTermChildrenResponse */
class SOAP_CMAC _ns1__getTermChildrenResponse
{
public:
	ns2__Map *getTermChildrenReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__ns1__getTermChildrenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermChildrenResponse() { _ns1__getTermChildrenResponse::soap_default(NULL); }
	virtual ~_ns1__getTermChildrenResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermRelations
#define SOAP_TYPE__ns1__getTermRelations (43)
/* ns1:getTermRelations */
class SOAP_CMAC _ns1__getTermRelations
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__ns1__getTermRelations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermRelations() { _ns1__getTermRelations::soap_default(NULL); }
	virtual ~_ns1__getTermRelations() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermRelationsResponse
#define SOAP_TYPE__ns1__getTermRelationsResponse (44)
/* ns1:getTermRelationsResponse */
class SOAP_CMAC _ns1__getTermRelationsResponse
{
public:
	ns2__Map *getTermRelationsReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__ns1__getTermRelationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermRelationsResponse() { _ns1__getTermRelationsResponse::soap_default(NULL); }
	virtual ~_ns1__getTermRelationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getChildrenFromRoot
#define SOAP_TYPE__ns1__getChildrenFromRoot (45)
/* ns1:getChildrenFromRoot */
class SOAP_CMAC _ns1__getChildrenFromRoot
{
public:
	std::string rootTermId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	class ns2__Vector *childrenIds;	/* required element of type ns2:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__ns1__getChildrenFromRoot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getChildrenFromRoot() { _ns1__getChildrenFromRoot::soap_default(NULL); }
	virtual ~_ns1__getChildrenFromRoot() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getChildrenFromRootResponse
#define SOAP_TYPE__ns1__getChildrenFromRootResponse (46)
/* ns1:getChildrenFromRootResponse */
class SOAP_CMAC _ns1__getChildrenFromRootResponse
{
public:
	ns2__Map *getChildrenFromRootReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:Map */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__ns1__getChildrenFromRootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getChildrenFromRootResponse() { _ns1__getChildrenFromRootResponse::soap_default(NULL); }
	virtual ~_ns1__getChildrenFromRootResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__isObsolete
#define SOAP_TYPE__ns1__isObsolete (47)
/* ns1:isObsolete */
class SOAP_CMAC _ns1__isObsolete
{
public:
	std::string termId;	/* required element of type xsd:string */
	std::string ontologyName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE__ns1__isObsolete */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__isObsolete() { _ns1__isObsolete::soap_default(NULL); }
	virtual ~_ns1__isObsolete() { }
};
#endif

#ifndef SOAP_TYPE__ns1__isObsoleteResponse
#define SOAP_TYPE__ns1__isObsoleteResponse (48)
/* ns1:isObsoleteResponse */
class SOAP_CMAC _ns1__isObsoleteResponse
{
public:
	bool isObsoleteReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE__ns1__isObsoleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__isObsoleteResponse() { _ns1__isObsoleteResponse::soap_default(NULL); }
	virtual ~_ns1__isObsoleteResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermsByAnnotationData
#define SOAP_TYPE__ns1__getTermsByAnnotationData (49)
/* ns1:getTermsByAnnotationData */
class SOAP_CMAC _ns1__getTermsByAnnotationData
{
public:
	std::string ontologyName;	/* required element of type xsd:string */
	std::string annotationType;	/* required element of type xsd:string */
	std::string strValue;	/* required element of type xsd:string */
	double fromDblValue;	/* required element of type xsd:double */
	double toDblValue;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__ns1__getTermsByAnnotationData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermsByAnnotationData() { _ns1__getTermsByAnnotationData::soap_default(NULL); }
	virtual ~_ns1__getTermsByAnnotationData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getTermsByAnnotationDataResponse
#define SOAP_TYPE__ns1__getTermsByAnnotationDataResponse (50)
/* ns1:getTermsByAnnotationDataResponse */
class SOAP_CMAC _ns1__getTermsByAnnotationDataResponse
{
public:
	std::vector<class ns3__DataHolder * >getTermsByAnnotationDataReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:DataHolder */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__ns1__getTermsByAnnotationDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getTermsByAnnotationDataResponse() { _ns1__getTermsByAnnotationDataResponse::soap_default(NULL); }
	virtual ~_ns1__getTermsByAnnotationDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__mapItem
#define SOAP_TYPE_ns2__mapItem (51)
/* ns2:mapItem */
class SOAP_CMAC ns2__mapItem : public xsd__anyType
{
public:
	xsd__anyType *key;	/* optional element of type xsd:anyType */
	xsd__anyType *value;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns2__mapItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__mapItem() { ns2__mapItem::soap_default(NULL); }
	virtual ~ns2__mapItem() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Map
#define SOAP_TYPE_ns2__Map (52)
/* ns2:Map */
class SOAP_CMAC ns2__Map : public xsd__anyType
{
public:
	std::vector<ns2__mapItem * >item;	/* optional element of type ns2:mapItem */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns2__Map */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Map() { ns2__Map::soap_default(NULL); }
	virtual ~ns2__Map() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Vector
#define SOAP_TYPE_ns2__Vector (53)
/* ns2:Vector */
class SOAP_CMAC ns2__Vector : public xsd__anyType
{
public:
	std::vector<xsd__anyType * >item;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns2__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Vector() { ns2__Vector::soap_default(NULL); }
	virtual ~ns2__Vector() { }
};
#endif

#ifndef SOAP_TYPE_ns3__DataHolder
#define SOAP_TYPE_ns3__DataHolder (54)
/* ns3:DataHolder */
class SOAP_CMAC ns3__DataHolder : public xsd__anyType
{
public:
	double *annotationNumberValue;	/* optional element of type xsd:double */
	std::string *annotationStringValue;	/* optional element of type xsd:string */
	std::string *annotationType;	/* optional element of type xsd:string */
	std::string *termId;	/* optional element of type xsd:string */
	std::string *termName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns3__DataHolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__DataHolder() { ns3__DataHolder::soap_default(NULL); }
	virtual ~ns3__DataHolder() { }
};
#endif

#ifndef SOAP_TYPE___ns1__getVersion
#define SOAP_TYPE___ns1__getVersion (69)
/* Operation wrapper: */
struct __ns1__getVersion
{
public:
	_ns1__getVersion *ns1__getVersion;	/* optional element of type ns1:getVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermById
#define SOAP_TYPE___ns1__getTermById (73)
/* Operation wrapper: */
struct __ns1__getTermById
{
public:
	_ns1__getTermById *ns1__getTermById;	/* optional element of type ns1:getTermById */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermMetadata
#define SOAP_TYPE___ns1__getTermMetadata (77)
/* Operation wrapper: */
struct __ns1__getTermMetadata
{
public:
	_ns1__getTermMetadata *ns1__getTermMetadata;	/* optional element of type ns1:getTermMetadata */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermXrefs
#define SOAP_TYPE___ns1__getTermXrefs (81)
/* Operation wrapper: */
struct __ns1__getTermXrefs
{
public:
	_ns1__getTermXrefs *ns1__getTermXrefs;	/* optional element of type ns1:getTermXrefs */
};
#endif

#ifndef SOAP_TYPE___ns1__getOntologyNames
#define SOAP_TYPE___ns1__getOntologyNames (85)
/* Operation wrapper: */
struct __ns1__getOntologyNames
{
public:
	_ns1__getOntologyNames *ns1__getOntologyNames;	/* optional element of type ns1:getOntologyNames */
};
#endif

#ifndef SOAP_TYPE___ns1__getOntologyLoadDate
#define SOAP_TYPE___ns1__getOntologyLoadDate (89)
/* Operation wrapper: */
struct __ns1__getOntologyLoadDate
{
public:
	_ns1__getOntologyLoadDate *ns1__getOntologyLoadDate;	/* optional element of type ns1:getOntologyLoadDate */
};
#endif

#ifndef SOAP_TYPE___ns1__getAllTermsFromOntology
#define SOAP_TYPE___ns1__getAllTermsFromOntology (93)
/* Operation wrapper: */
struct __ns1__getAllTermsFromOntology
{
public:
	_ns1__getAllTermsFromOntology *ns1__getAllTermsFromOntology;	/* optional element of type ns1:getAllTermsFromOntology */
};
#endif

#ifndef SOAP_TYPE___ns1__getRootTerms
#define SOAP_TYPE___ns1__getRootTerms (97)
/* Operation wrapper: */
struct __ns1__getRootTerms
{
public:
	_ns1__getRootTerms *ns1__getRootTerms;	/* optional element of type ns1:getRootTerms */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermsByName
#define SOAP_TYPE___ns1__getTermsByName (101)
/* Operation wrapper: */
struct __ns1__getTermsByName
{
public:
	_ns1__getTermsByName *ns1__getTermsByName;	/* optional element of type ns1:getTermsByName */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermsByExactName
#define SOAP_TYPE___ns1__getTermsByExactName (105)
/* Operation wrapper: */
struct __ns1__getTermsByExactName
{
public:
	_ns1__getTermsByExactName *ns1__getTermsByExactName;	/* optional element of type ns1:getTermsByExactName */
};
#endif

#ifndef SOAP_TYPE___ns1__getPrefixedTermsByName
#define SOAP_TYPE___ns1__getPrefixedTermsByName (109)
/* Operation wrapper: */
struct __ns1__getPrefixedTermsByName
{
public:
	_ns1__getPrefixedTermsByName *ns1__getPrefixedTermsByName;	/* optional element of type ns1:getPrefixedTermsByName */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermParents
#define SOAP_TYPE___ns1__getTermParents (113)
/* Operation wrapper: */
struct __ns1__getTermParents
{
public:
	_ns1__getTermParents *ns1__getTermParents;	/* optional element of type ns1:getTermParents */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermChildren
#define SOAP_TYPE___ns1__getTermChildren (117)
/* Operation wrapper: */
struct __ns1__getTermChildren
{
public:
	_ns1__getTermChildren *ns1__getTermChildren;	/* optional element of type ns1:getTermChildren */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermRelations
#define SOAP_TYPE___ns1__getTermRelations (121)
/* Operation wrapper: */
struct __ns1__getTermRelations
{
public:
	_ns1__getTermRelations *ns1__getTermRelations;	/* optional element of type ns1:getTermRelations */
};
#endif

#ifndef SOAP_TYPE___ns1__getChildrenFromRoot
#define SOAP_TYPE___ns1__getChildrenFromRoot (125)
/* Operation wrapper: */
struct __ns1__getChildrenFromRoot
{
public:
	_ns1__getChildrenFromRoot *ns1__getChildrenFromRoot;	/* optional element of type ns1:getChildrenFromRoot */
};
#endif

#ifndef SOAP_TYPE___ns1__isObsolete
#define SOAP_TYPE___ns1__isObsolete (129)
/* Operation wrapper: */
struct __ns1__isObsolete
{
public:
	_ns1__isObsolete *ns1__isObsolete;	/* optional element of type ns1:isObsolete */
};
#endif

#ifndef SOAP_TYPE___ns1__getTermsByAnnotationData
#define SOAP_TYPE___ns1__getTermsByAnnotationData (133)
/* Operation wrapper: */
struct __ns1__getTermsByAnnotationData
{
public:
	_ns1__getTermsByAnnotationData *ns1__getTermsByAnnotationData;	/* optional element of type ns1:getTermsByAnnotationData */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (134)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (135)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (137)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (140)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (141)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
